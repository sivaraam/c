#! /usr/bin/env python3
# Script to generate statistic values for analysing run time of maze solver
# using A-star and BFS.

import readline

total_observations = 10

bfs_timings = [0.003, 0.005, 0.002, 0.010, 0.031, 0.625, 0.537, 2.376, 6.848, 3863.195]
observed = [0.001, 0.001, 0.001, 0.012, 0.033, 0.644, 0.473, 2.406, 9.332, 3828.963]

def bfs_is_faster_by(image_num, cmp_time):
	diff_time = cmp_time - bfs_timings[image_num]
	return (diff_time/cmp_time)*100

print("BFS is faster than A-star (manhattan distance with tie breaks) by:")
for i in range(0, total_observations):
    print("Image", i, ":", round(bfs_is_faster_by(i, observed[i]), 2))
print()

total_nodes = [43, 100, 801, 20692, 82724, 2006882, 2000001, 8000001, 18642114, 50000001]
bfs_expanded = [36, 88, 780, 13866, 70167, 1949485, 918257, 6201755, 18642106, 38464642]
observed_expansion = [23, 72, 770, 10069, 39707, 1248103, 837282, 6023391, 18636058, 38006213]

def percent_nodes_expanded(image_num, observed_expansion):
	return (observed_expansion/total_nodes[image_num])*100

def percent_nodes_less_expanded_a_star(image_num, expanded_nodes):
	diff_nodes = bfs_expanded[image_num] - expanded_nodes
	return (diff_nodes/bfs_expanded[image_num])*100

print ("Nodes expanded by BFS (%nodes expanded)")
for i in range(0, total_observations):
    print(bfs_expanded[i], '(', round(percent_nodes_expanded(i, bfs_expanded[i]), 2), ')')
print()

print("Nodes expanded by A-star (% nodes expanded)")
for i in range(0,total_observations):
    print(observed_expansion[i], '(', round(percent_nodes_expanded(i, observed_expansion[i]), 2), ')')
print()

print("A-star expands X% less nodes than BFS")
for i in range(0, total_observations):
    print(round(percent_nodes_less_expanded_a_star(i, observed_expansion[i]), 2))
